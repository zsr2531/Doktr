//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/admin/Documents/Projects/Doktr/src/Lifters/Doktr.Lifters.Common/Xml.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Doktr.Xml {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class Xml : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		START_TAG=1, TEXT=2, END_TAG=3, XML=4, QUOTE=5, DOUBLE_QUOTE=6, EQUAL=7, 
		SLASH=8, QUESTION_MARK=9, QUOTED_STRING=10, DOUBLE_QUOTED_STRING=11, IDENTIFIER=12, 
		WS=13;
	public const int
		RULE_string = 0, RULE_attribute = 1, RULE_prolog = 2, RULE_element = 3, 
		RULE_endElement = 4, RULE_emptyElement = 5, RULE_textElement = 6, RULE_node = 7, 
		RULE_unit = 8;
	public static readonly string[] ruleNames = {
		"string", "attribute", "prolog", "element", "endElement", "emptyElement", 
		"textElement", "node", "unit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<'", null, "'>'", "'xml'", "'''", "'\"'", "'='", "'/'", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "START_TAG", "TEXT", "END_TAG", "XML", "QUOTE", "DOUBLE_QUOTE", 
		"EQUAL", "SLASH", "QUESTION_MARK", "QUOTED_STRING", "DOUBLE_QUOTED_STRING", 
		"IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Xml.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Xml() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Xml(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Xml(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_STRING() { return GetToken(Xml.QUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_STRING() { return GetToken(Xml.DOUBLE_QUOTED_STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlVisitor<TResult> typedVisitor = visitor as IXmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 0, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			_la = TokenStream.LA(1);
			if ( !(_la==QUOTED_STRING || _la==DOUBLE_QUOTED_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Xml.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(Xml.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlVisitor<TResult> typedVisitor = visitor as IXmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 2, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			Match(IDENTIFIER);
			State = 21;
			Match(EQUAL);
			State = 22;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrologContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_TAG() { return GetToken(Xml.START_TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION_MARK() { return GetTokens(Xml.QUESTION_MARK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_MARK(int i) {
			return GetToken(Xml.QUESTION_MARK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(Xml.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_TAG() { return GetToken(Xml.END_TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public PrologContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prolog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlVisitor<TResult> typedVisitor = visitor as IXmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProlog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrologContext prolog() {
		PrologContext _localctx = new PrologContext(Context, State);
		EnterRule(_localctx, 4, RULE_prolog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			Match(START_TAG);
			State = 25;
			Match(QUESTION_MARK);
			State = 26;
			Match(XML);
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 27;
				attribute();
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 33;
			Match(QUESTION_MARK);
			State = 34;
			Match(END_TAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_TAG() { return GetToken(Xml.START_TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Xml.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_TAG() { return GetToken(Xml.END_TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlVisitor<TResult> typedVisitor = visitor as IXmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 6, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(START_TAG);
			State = 37;
			Match(IDENTIFIER);
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 38;
				attribute();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 44;
			Match(END_TAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_TAG() { return GetToken(Xml.START_TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(Xml.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Xml.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_TAG() { return GetToken(Xml.END_TAG, 0); }
		public EndElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlVisitor<TResult> typedVisitor = visitor as IXmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndElementContext endElement() {
		EndElementContext _localctx = new EndElementContext(Context, State);
		EnterRule(_localctx, 8, RULE_endElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(START_TAG);
			State = 47;
			Match(SLASH);
			State = 48;
			Match(IDENTIFIER);
			State = 49;
			Match(END_TAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_TAG() { return GetToken(Xml.START_TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Xml.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(Xml.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_TAG() { return GetToken(Xml.END_TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public EmptyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlVisitor<TResult> typedVisitor = visitor as IXmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyElementContext emptyElement() {
		EmptyElementContext _localctx = new EmptyElementContext(Context, State);
		EnterRule(_localctx, 10, RULE_emptyElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(START_TAG);
			State = 52;
			Match(IDENTIFIER);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 53;
				attribute();
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 59;
			Match(SLASH);
			State = 60;
			Match(END_TAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(Xml.TEXT, 0); }
		public TextElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlVisitor<TResult> typedVisitor = visitor as IXmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextElementContext textElement() {
		TextElementContext _localctx = new TextElementContext(Context, State);
		EnterRule(_localctx, 12, RULE_textElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : ParserRuleContext {
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
	 
		public NodeContext() { }
		public virtual void CopyFrom(NodeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyContext : NodeContext {
		[System.Diagnostics.DebuggerNonUserCode] public EmptyElementContext emptyElement() {
			return GetRuleContext<EmptyElementContext>(0);
		}
		public EmptyContext(NodeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlVisitor<TResult> typedVisitor = visitor as IXmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BeginContext : NodeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public BeginContext(NodeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlVisitor<TResult> typedVisitor = visitor as IXmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EndContext : NodeContext {
		[System.Diagnostics.DebuggerNonUserCode] public EndElementContext endElement() {
			return GetRuleContext<EndElementContext>(0);
		}
		public EndContext(NodeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlVisitor<TResult> typedVisitor = visitor as IXmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextContext : NodeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextElementContext textElement() {
			return GetRuleContext<TextElementContext>(0);
		}
		public TextContext(NodeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlVisitor<TResult> typedVisitor = visitor as IXmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 14, RULE_node);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new BeginContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				element();
				}
				break;
			case 2:
				_localctx = new EndContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				endElement();
				}
				break;
			case 3:
				_localctx = new EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 66;
				emptyElement();
				}
				break;
			case 4:
				_localctx = new TextContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 67;
				textElement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Xml.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrologContext prolog() {
			return GetRuleContext<PrologContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlVisitor<TResult> typedVisitor = visitor as IXmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 16, RULE_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 70;
				prolog();
				}
				break;
			}
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 73;
				node();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==START_TAG || _la==TEXT );
			State = 78;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,13,81,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,29,8,2,10,2,12,
		2,32,9,2,1,2,1,2,1,2,1,3,1,3,1,3,5,3,40,8,3,10,3,12,3,43,9,3,1,3,1,3,1,
		4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,5,5,55,8,5,10,5,12,5,58,9,5,1,5,1,5,1,5,
		1,6,1,6,1,7,1,7,1,7,1,7,3,7,69,8,7,1,8,3,8,72,8,8,1,8,4,8,75,8,8,11,8,
		12,8,76,1,8,1,8,1,8,0,0,9,0,2,4,6,8,10,12,14,16,0,1,1,0,10,11,79,0,18,
		1,0,0,0,2,20,1,0,0,0,4,24,1,0,0,0,6,36,1,0,0,0,8,46,1,0,0,0,10,51,1,0,
		0,0,12,62,1,0,0,0,14,68,1,0,0,0,16,71,1,0,0,0,18,19,7,0,0,0,19,1,1,0,0,
		0,20,21,5,12,0,0,21,22,5,7,0,0,22,23,3,0,0,0,23,3,1,0,0,0,24,25,5,1,0,
		0,25,26,5,9,0,0,26,30,5,4,0,0,27,29,3,2,1,0,28,27,1,0,0,0,29,32,1,0,0,
		0,30,28,1,0,0,0,30,31,1,0,0,0,31,33,1,0,0,0,32,30,1,0,0,0,33,34,5,9,0,
		0,34,35,5,3,0,0,35,5,1,0,0,0,36,37,5,1,0,0,37,41,5,12,0,0,38,40,3,2,1,
		0,39,38,1,0,0,0,40,43,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,44,1,0,0,
		0,43,41,1,0,0,0,44,45,5,3,0,0,45,7,1,0,0,0,46,47,5,1,0,0,47,48,5,8,0,0,
		48,49,5,12,0,0,49,50,5,3,0,0,50,9,1,0,0,0,51,52,5,1,0,0,52,56,5,12,0,0,
		53,55,3,2,1,0,54,53,1,0,0,0,55,58,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,
		57,59,1,0,0,0,58,56,1,0,0,0,59,60,5,8,0,0,60,61,5,3,0,0,61,11,1,0,0,0,
		62,63,5,2,0,0,63,13,1,0,0,0,64,69,3,6,3,0,65,69,3,8,4,0,66,69,3,10,5,0,
		67,69,3,12,6,0,68,64,1,0,0,0,68,65,1,0,0,0,68,66,1,0,0,0,68,67,1,0,0,0,
		69,15,1,0,0,0,70,72,3,4,2,0,71,70,1,0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,
		73,75,3,14,7,0,74,73,1,0,0,0,75,76,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,
		77,78,1,0,0,0,78,79,5,0,0,1,79,17,1,0,0,0,6,30,41,56,68,71,76
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Doktr.Lifters.Common.XmlDoc.Xml