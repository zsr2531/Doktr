//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/admin/Documents/Projects/Doktr/src/Lifters/Doktr.Lifters.Common/XmlLexer.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Doktr.Xml {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class XmlLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		START_TAG=1, TEXT=2, END_TAG=3, XML=4, QUOTE=5, DOUBLE_QUOTE=6, EQUAL=7, 
		SLASH=8, QUESTION_MARK=9, QUOTED_STRING=10, DOUBLE_QUOTED_STRING=11, IDENTIFIER=12, 
		WS=13;
	public const int
		IN_TAG=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "IN_TAG"
	};

	public static readonly string[] ruleNames = {
		"START_TAG", "TEXT", "S", "ID", "END_TAG", "XML", "QUOTE", "DOUBLE_QUOTE", 
		"EQUAL", "SLASH", "QUESTION_MARK", "QUOTED_STRING", "DOUBLE_QUOTED_STRING", 
		"IDENTIFIER", "WS"
	};


	public XmlLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public XmlLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'<'", null, "'>'", "'xml'", "'''", "'\"'", "'='", "'/'", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "START_TAG", "TEXT", "END_TAG", "XML", "QUOTE", "DOUBLE_QUOTE", 
		"EQUAL", "SLASH", "QUESTION_MARK", "QUOTED_STRING", "DOUBLE_QUOTED_STRING", 
		"IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XmlLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static XmlLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,13,98,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,1,0,1,0,1,0,1,0,1,1,4,1,38,8,1,11,1,12,1,39,1,2,1,2,1,3,1,3,
		5,3,46,8,3,10,3,12,3,49,9,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,
		7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,5,11,74,8,11,
		10,11,12,11,77,9,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,5,12,86,8,12,10,
		12,12,12,89,9,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,2,75,87,0,15,
		2,1,4,2,6,0,8,0,10,3,12,4,14,5,16,6,18,7,20,8,22,9,24,10,26,11,28,12,30,
		13,2,0,1,7,1,0,60,60,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,
		57,65,90,95,95,97,122,1,0,39,39,1,0,10,10,1,0,34,34,102,0,2,1,0,0,0,0,
		4,1,0,0,0,1,10,1,0,0,0,1,12,1,0,0,0,1,14,1,0,0,0,1,16,1,0,0,0,1,18,1,0,
		0,0,1,20,1,0,0,0,1,22,1,0,0,0,1,24,1,0,0,0,1,26,1,0,0,0,1,28,1,0,0,0,1,
		30,1,0,0,0,2,32,1,0,0,0,4,37,1,0,0,0,6,41,1,0,0,0,8,43,1,0,0,0,10,50,1,
		0,0,0,12,54,1,0,0,0,14,58,1,0,0,0,16,60,1,0,0,0,18,62,1,0,0,0,20,64,1,
		0,0,0,22,66,1,0,0,0,24,68,1,0,0,0,26,80,1,0,0,0,28,92,1,0,0,0,30,94,1,
		0,0,0,32,33,5,60,0,0,33,34,1,0,0,0,34,35,6,0,0,0,35,3,1,0,0,0,36,38,8,
		0,0,0,37,36,1,0,0,0,38,39,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,5,1,0,
		0,0,41,42,7,1,0,0,42,7,1,0,0,0,43,47,7,2,0,0,44,46,7,3,0,0,45,44,1,0,0,
		0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,9,1,0,0,0,49,47,1,0,0,0,
		50,51,5,62,0,0,51,52,1,0,0,0,52,53,6,4,1,0,53,11,1,0,0,0,54,55,5,120,0,
		0,55,56,5,109,0,0,56,57,5,108,0,0,57,13,1,0,0,0,58,59,5,39,0,0,59,15,1,
		0,0,0,60,61,5,34,0,0,61,17,1,0,0,0,62,63,5,61,0,0,63,19,1,0,0,0,64,65,
		5,47,0,0,65,21,1,0,0,0,66,67,5,63,0,0,67,23,1,0,0,0,68,75,3,14,6,0,69,
		74,8,4,0,0,70,74,8,5,0,0,71,72,5,92,0,0,72,74,5,39,0,0,73,69,1,0,0,0,73,
		70,1,0,0,0,73,71,1,0,0,0,74,77,1,0,0,0,75,76,1,0,0,0,75,73,1,0,0,0,76,
		78,1,0,0,0,77,75,1,0,0,0,78,79,3,14,6,0,79,25,1,0,0,0,80,87,3,16,7,0,81,
		86,8,6,0,0,82,86,8,5,0,0,83,84,5,92,0,0,84,86,5,34,0,0,85,81,1,0,0,0,85,
		82,1,0,0,0,85,83,1,0,0,0,86,89,1,0,0,0,87,88,1,0,0,0,87,85,1,0,0,0,88,
		90,1,0,0,0,89,87,1,0,0,0,90,91,3,16,7,0,91,27,1,0,0,0,92,93,3,8,3,0,93,
		29,1,0,0,0,94,95,3,6,2,0,95,96,1,0,0,0,96,97,6,14,2,0,97,31,1,0,0,0,8,
		0,1,39,47,73,75,85,87,3,5,1,0,4,0,0,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Doktr.Lifters.Common.XmlDoc.Xml